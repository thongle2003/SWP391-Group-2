// API service for handling all backend communications
const API_BASE_URL = 'http://localhost:8080/api';

const apiService = {
  // th√™m export c·ªßa API_BASE_URL ƒë·ªÉ c√°c module kh√°c c√≥ th·ªÉ d√πng tr·ª±c ti·∫øp
  API_BASE_URL,
  // thi·∫øt l·∫≠p c√°c ph∆∞∆°ng th·ª©c api ·ªü ƒë√¢y


  //api ƒë·ªÉ qu·∫£n l√Ω b√†i ƒëƒÉng s·∫£n ph·∫©m
  get_detail_product_post: (productId) => `${API_BASE_URL}/listings/${productId}`,
  update_product_post: (productId) => `${API_BASE_URL}/listings/${productId}`,
  delete_product_post: (productId) => `${API_BASE_URL}/listings/${productId}`,
    /**
   * L·∫•y danh s√°ch b√†i ƒëƒÉng v·ªõi c√°c tham s·ªë t√πy ch·ªçn ƒë·ªÉ l·ªçc, ph√¢n trang v√† s·∫Øp x·∫øp.
   * Kh·ªõp ch√≠nh x√°c v·ªõi endpoint GET /api/listings tr√™n backend.
   * @param {object} params - M·ªôt ƒë·ªëi t∆∞·ª£ng ch·ª©a c√°c tham s·ªë truy v·∫•n.
   * V√≠ d·ª•: { status: 'PENDING', page: 0, size: 20, sortBy: 'price' }
   */
  getAll_products_post: (params = {}) => {
    // URLSearchParams s·∫Ω t·ª± ƒë·ªông b·ªè qua c√°c gi√° tr·ªã undefined ho·∫∑c null
    // v√† m√£ h√≥a (encode) c√°c gi√° tr·ªã m·ªôt c√°ch ch√≠nh x√°c.
    const query = new URLSearchParams(params).toString();
    
    // N·∫øu query kh√¥ng r·ªóng, th√™m '?' v√†o tr∆∞·ªõc, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ chu·ªói r·ªóng.
    const queryString = query ? `?${query}` : '';

    return `${API_BASE_URL}/listings${queryString}`;
  },

  create_product_post:`${API_BASE_URL}/listings`,

  /**
   * T·ª´ ch·ªëi m·ªôt b√†i ƒëƒÉng.
   * @param {number} productId - ID c·ªßa b√†i ƒëƒÉng, s·∫Ω ƒë∆∞·ª£c ch√®n v√†o ƒë∆∞·ªùng d·∫´n.
   * @param {string} reason - L√Ω do t·ª´ ch·ªëi, s·∫Ω ƒë∆∞·ª£c th√™m l√†m query parameter.
   */
  reject_product_post: (productId, reason) => {
    // 1. T·∫°o URL c∆° s·ªü v·ªõi path variable
    const url = `${API_BASE_URL}/listings/${productId}/reject`;

    // 2. D√πng URLSearchParams ƒë·ªÉ th√™m 'reason' m·ªôt c√°ch an to√†n
    // (t·ª± ƒë·ªông m√£ h√≥a k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ d·∫•u c√°ch, ti·∫øng Vi·ªát)
    const params = new URLSearchParams();
    if (reason) { // Ch·ªâ th√™m 'reason' n·∫øu n√≥ t·ªìn t·∫°i
      params.append('reason', reason);
    }

    const queryString = params.toString();
    
    // 3. K·∫øt h·ª£p l·∫°i
    return `${url}${queryString ? `?${queryString}` : ''}`;
  },

  approve_product_post: (productId) => `${API_BASE_URL}/listings/${productId}/approve`,
  
  /**
   * (S·ª¨A L·∫†I H√ÄM N√ÄY)
   * L·∫•y danh s√°ch c√°c b√†i ƒëƒÉng ƒëang ch·ªù ph√™ duy·ªát (pending).
   * H·ªó tr·ª£ ph√¢n trang v√† s·∫Øp x·∫øp.
   * @param {object} params - ƒê·ªëi t∆∞·ª£ng ch·ª©a tham s·ªë ph√¢n trang/s·∫Øp x·∫øp.
   * V√≠ d·ª•: { page: 1, size: 5, sortBy: 'price' }
   */
  get_pending_products_post: (params = {}) => {
    // T√°i s·ª≠ d·ª•ng logic c·ªßa URLSearchParams
    const query = new URLSearchParams(params).toString();
    const queryString = query ? `?${query}` : '';

    return `${API_BASE_URL}/listings/pending${queryString}`;
  },
  

  //api qu·∫£n l√Ω th∆∞∆°ng hi·ªáu
  create_new_brand:`${API_BASE_URL}/brands`,
  get_all_brands: `${API_BASE_URL}/brands`,
  //api qu·∫£n l√Ω danh m·ª•c
  create_new_category:`${API_BASE_URL}/categories`,
  get_all_categories: `${API_BASE_URL}/categories`, // <-- Th√™m d√≤ng n√†y


  //api ƒë·ªÉ qu·∫£n l√Ω ƒë∆°n h√†ng v√† thanh to√°n
  create_new_payment:`${API_BASE_URL}/payments`,
  get_all_oders:`${API_BASE_URL}/orders`,
  create_new_oder:`${API_BASE_URL}/orders`,
  get_history_payment: (transactionId) => `${API_BASE_URL}/transactions/${transactionId}payments`,
  get_detail_oder: (orderId) => `${API_BASE_URL}/orders/${orderId}`,


  //api user controller
  get_user_by_id: (userId) => `${API_BASE_URL}/users/${userId}`,
  update_user_by_id: (userId) => `${API_BASE_URL}/users/${userId}`,
  delete_user_by_id: (userId) => `${API_BASE_URL}/users/${userId}`,
  get_all_users: `${API_BASE_URL}/users`,
  create_new_user: `${API_BASE_URL}/users`,
  disable_user_by_id: (userId) => `${API_BASE_URL}/users/${userId}/disable`,
  approve_user_by_id: (userId) => `${API_BASE_URL}/users/${userId}/approve`,

  //profile controller
  profile_user_by_id: (userId) => `${API_BASE_URL}/profiles/${userId}`,
  /**
   * C·∫≠p nh·∫≠t th√¥ng tin profile c·ªßa ng∆∞·ªùi d√πng (PUT).
   * @param {number} userId - ID c·ªßa ng∆∞·ªùi d√πng c·∫ßn c·∫≠p nh·∫≠t.
   */
  update_profile_by_id: (userId) => `${API_BASE_URL}/profiles/${userId}`,

  
  //api complaint controller (feedback)
  /**
   * @param {number} complaintId - ID c·ªßa khi·∫øu n·∫°i c·∫ßn gi·∫£i quy·∫øt.
   */
  resolve_complaint : (complaintId) => `${API_BASE_URL}/complaints/${complaintId}/resolve`,
 
  /**
   * L·∫•y danh s√°ch khi·∫øu n·∫°i, c√≥ th·ªÉ l·ªçc theo tr·∫°ng th√°i.
   * @param {object} params - ƒê·ªëi t∆∞·ª£ng ch·ª©a tham s·ªë l·ªçc. V√≠ d·ª•: { status: 'PENDING' }
   */
  get_all_complaints: (params = {}) => {
    // T√°i s·ª≠ d·ª•ng logic URLSearchParams ƒë√£ d√πng tr∆∞·ªõc ƒë√¢y
    const query = new URLSearchParams(params).toString();
    const queryString = query ? `?${query}` : '';

    return `${API_BASE_URL}/complaints${queryString}`;
  },


  create_new_complaint: `${API_BASE_URL}/complaints`,


  //review controller
  create_new_review: `${API_BASE_URL}/reviews`,
  get_reviews_for_listing: (listingId) => `${API_BASE_URL}/reviews/listing/${listingId}`,


  //favorite controller
  /**
   * Th√™m m·ªôt b√†i ƒëƒÉng v√†o danh s√°ch y√™u th√≠ch (POST).
   * @param {number} listingId - ID c·ªßa b√†i ƒëƒÉng c·∫ßn th√™m.
   */
  add_favorite: (listingId) => `${API_BASE_URL}/favorites/listings/${listingId}`,

  /**
   * X√≥a m·ªôt b√†i ƒëƒÉng kh·ªèi danh s√°ch y√™u th√≠ch (DELETE).
   * @param {number} listingId - ID c·ªßa b√†i ƒëƒÉng c·∫ßn x√≥a.
   */
  remove_favorite: (listingId) => `${API_BASE_URL}/favorites/listings/${listingId}`,

  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b√†i ƒëƒÉng y√™u th√≠ch c·ªßa ng∆∞·ªùi d√πng (GET).
   */
  get_my_favorites: `${API_BASE_URL}/favorites/listings`,





  // User authentication endpoints
  login: async (credentials) => {
    const response = await fetch(`${API_BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });

    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(errorData || 'T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    const data = await response.json();
    
    // Debug: Log response t·ª´ backend
    console.log('‚úÖ Login API Response:', data);
    
    // L∆∞u token v√†o localStorage
    if (data.token) {
      localStorage.setItem('authToken', data.token);
      localStorage.setItem('tokenType', data.tokenType || 'Bearer ');
      console.log('Token saved:', data.token);
    }
    
    // L∆∞u user data (data ·ªü root level t·ª´ API)
    const userData = {
      id: data.userID,
      userID: data.userID,
      username: data.username,
      email: data.email,
      role: data.role
    };
    
    localStorage.setItem('userData', JSON.stringify(userData));
    localStorage.setItem('user', JSON.stringify(userData));
    localStorage.setItem('isLoggedIn', 'true');
    localStorage.setItem('userID', data.userID);
    localStorage.setItem('username', data.username);
    
    // ===== L·∫§Y ATTRIBUTE ROLE T·ª™ API =====
    const roleAttribute = data.role; // getAttribute t·ª´ response
    
    // Chuy·ªÉn ƒë·ªïi role string sang role ID
    let roleId = 3; // Default: Member
    if (roleAttribute === 'Admin') {
      roleId = 1;
    } else if (roleAttribute === 'Moderator') {
      roleId = 2;
    } else if (roleAttribute === 'Member') {
      roleId = 3;
    }
    
    // L∆∞u role v√†o localStorage
    localStorage.setItem('role', roleId.toString());
    localStorage.setItem('roleId', roleId.toString());
    localStorage.setItem('roleName', roleAttribute);
    
    console.log('üìå Role getAttribute:', roleAttribute, '‚Üí ID:', roleId);
    
    // ===== TH√îNG B√ÅO THEO ROLE =====
    if (roleAttribute === 'Admin') {
      alert(`‚úÖ ƒê√£ ƒëƒÉng nh·∫≠p l√† ADMIN\n\nUser: ${data.username}\nEmail: ${data.email}`);
    }

    return data;
  },

  register: async (userData) => {
    const response = await fetch(`${API_BASE_URL}/auth/register`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    if (!response.ok) {
      const errorData = await response.text();
      throw new Error(errorData || 'ƒêƒÉng k√Ω th·∫•t b·∫°i');
    }

    // Debug: Log response t·ª´ backend
    console.log('Register response status:', response.status);
    
    // Parse response - backend c√≥ th·ªÉ tr·∫£ JSON ho·∫∑c text
    const contentType = response.headers.get('content-type');
    let data;
    
    if (contentType && contentType.includes('application/json')) {
      data = await response.json();
      console.log('Register response (JSON):', data);
    } else {
      data = await response.text();
      console.log('Register response (Text):', data);
      // N·∫øu backend tr·∫£ text, wrap th√†nh object
      data = { success: true, message: data };
    }

    return data;
  },







  // Logout
  logout: async () => {
    try {
      const token = localStorage.getItem('authToken');
      
      // G·ªçi API logout n·∫øu c√≥ token
      if (token) {
        const response = await fetch(`${API_BASE_URL}/auth/logout`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json',
          },
        });
        
        console.log('Logout response:', response.status);
        
        // Kh√¥ng c·∫ßn ki·ªÉm tra response.ok v√¨ d√π API fail v·∫´n ph·∫£i clear localStorage
      }
    } catch (error) {
      console.error('Logout API error:', error);
      // Ti·∫øp t·ª•c clear localStorage d√π API l·ªói
    } finally {
      // Lu√¥n lu√¥n x√≥a localStorage
      localStorage.removeItem('authToken');
      localStorage.removeItem('userData');
      localStorage.removeItem('user');
      localStorage.removeItem('isLoggedIn');
      localStorage.removeItem('userID');
      
      console.log('Local storage cleared');
    }
  },

  // Utility methods
  setAuthToken: (token) => {
    localStorage.setItem('authToken', token);
  },

  getAuthToken: () => {
    return localStorage.getItem('authToken');
  },

  clearAuthToken: () => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('userData');
    localStorage.removeItem('user');
    localStorage.removeItem('isLoggedIn');
    localStorage.removeItem('userID');
  },

  isAuthenticated: () => {
    const token = localStorage.getItem('authToken');
    const userData = localStorage.getItem('userData');
    return !!(token && userData);
  }
};

export default apiService;